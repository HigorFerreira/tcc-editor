import {
    Block,
} from '@/parser/types'

import { v4 as uuidv4 } from 'uuid';

/*
<plugin-gloss id="regex"></plugin-gloss>
<plugin-ref id="mdn-regex"></plugin-ref>
<plugin-ref-fig data-fig="">Figura 1</plugin-ref-fig>
<plugin-ref-table data-table="">Tabela</plugin-ref-table>
<plugin-footnote data-note="

">
*</plugin-footnote>
*/

/*
    {
        type: 'code',
        data: {
            uuid: `Code${uuidv4().replace(/-/g, '')}`,
            start_line: 1,
            text: `
`.trim()
        }
    },
*/

export const PaginaPrincipal: Block[] = [
    {
        type: 'header',
        data: {
            level: 3,
            text: 'Página principal'
        }
    },
    {
        type: 'paragraph',
        data: {
            text: `
                Neste primeiro momento, o editor em que o usuário interagirá
                será renderizado na página principal. Conforme dito anteriormente
                e ilustrado na
                <plugin-ref-fig data-fig="app-router">Figura 1</plugin-ref-fig>,
                a página principal está contida ao nível da pasta app, juntamente com
                seu layout.
            `.trim().replace(/^\s{16}/gm, '')
        }
    },
    {
        type: 'header',
        data: {
            level: 4,
            text: 'Layout'
        }
    },
    {
        type: 'paragraph',
        data: {
            text: `
                O arquivo de layout é o template base no qual todas as outras páginas herdarão.
                Observe na
                <plugin-ref-fig data-fig="layout-render-tree">Figura 1</plugin-ref-fig>
                a sub árvore de renderização do layout:
            `.trim().replace(/^\s{16}/gm, '')
        }
    },
    {
        type: 'image',
        data: {
            uuid: 'layout-render-tree',
            fileType: 'png',
            imageUrl: '',
            width: 0.15,
            title: 'Sub árvore de renderização do layout principal',
            description: 'Fonte: Autoria própria'
        }
    },
    {
        type: 'paragraph',
        data: {
            text: `
                Tem-se uma estrutura básica com a tag html, (a tag raiz do documento),
                logo após o body, que diz respeito a área de renderização do documento.
                Storage é um componente personalizado em React que será discutido mais adiante,
                ele serve basicamente para armazenar conteúdos no navegador do usuário.
                Logo em seguida há o último componente, (ou nó folha), que consiste no
                children. Neste contexto, children pode ser qualquer coisa a depender
                da rota de página ao qual se está acessando.
            `.trim().replace(/^\s{16}/gm, '')
        }
    },
    {
        type: 'paragraph',
        data: {
            text: `
                Observe abaixo o código de layout:
            `.trim().replace(/^\s{16}/gm, '')
        }
    },
    {
        type: 'code',
        data: {
            uuid: `Code${uuidv4().replace(/-/g, '')}`,
            start_line: 1,
            text: `
import type { Metadata } from 'next'
import { Inter } from 'next/font/google'

import Storage from '@/components/Storage';

const inter = Inter({ subsets: ['latin'] })

export const metadata: Metadata = {
    title: 'Create Next App',
    description: 'Generated by create next app',
}

export default function RootLayout({
    children,
}: {
    children: React.ReactNode
}) {
    return (
        <html lang="pt-BR">
            <body className={inter.className}>
                <Storage>
                    {children}
                </Storage>
            </body>
        </html>
    )
}
`.trim()
        }
    },
    {
        type: 'paragraph',
        data: {
            text: `
                Na linha 13 há a exportação do componente em si. O código
                <plugin-gloss id="tsx"></plugin-gloss>
                é retornado a partir da linha 18.
                Note que aqui não há o uso da tag head, padrão comum do
                <plugin-gloss id="html"></plugin-gloss>. Isso se dá
                pois o gerenciamento das configurações desta tag fica
                a cargo do NextJs. Observe que da linha 8 à 11
                há a exportação de uma constante denominada metadata. Nela
                há a chave title que o Next utilizará para renderizar o
                título da página, (que em um html normal seria configurado
                dentro de head).
            `.trim().replace(/^\s{16}/gm, '')
        }
    },
    {
        type: 'header',
        data: {
            level: 4,
            text: 'Page'
        }
    },
    {
        type: 'image',
        data: {
            uuid: 'page-render-tree',
            fileType: 'png',
            imageUrl: '',
            width: 0.5,
            title: 'Sub árvore de renderização da página principal',
            description: 'Fonte: Autoria própria'
        }
    },
]